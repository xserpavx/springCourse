package com.example.demo.entity;

import com.example.demo.services.ControllerService;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import org.json.JSONObject;

import javax.persistence.*;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Date;
import java.util.List;

/**
 * Created on 18.07.2021
 *
 * @author roland
 **/
@Entity
@Data
@Table(name = "books")
@ApiModel(description = "entity representing a book")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    private int id;

    @ApiModelProperty("book title")
    private String title;
    @ApiModelProperty("base price of book")
    private Float price;
    @ApiModelProperty("date of publication book")
    private Date pubDate;
    @ApiModelProperty("value is true if book is bestseller")
    @JsonProperty("isBestseller")
    private Boolean bestseller;
    @ApiModelProperty("mnemonical book name")
    private String slug;
    @ApiModelProperty("path to book cover image")
    private String image;
    @ApiModelProperty("short book description")
    private String description;
    @ApiModelProperty("discount of base price of book")
    private Integer discount;

    @ApiModelProperty("index of book popular`s")
    @Column(columnDefinition = "float default 0.0")
    private float popular;

    @ApiModelProperty("average users rating of book")
    @Column(columnDefinition = "int default 0")
    private int rating;


    @ManyToMany
    @JoinTable(name = "book2author",
            joinColumns = @JoinColumn(name = "id_book"),
            inverseJoinColumns = @JoinColumn(name = "id_author"))
    private List<Author> authors;

    @JsonProperty("authors")
    public String getAuthors() {
        return authors.isEmpty() ? "" : authors.get(0).getName();
    }

    @JsonProperty("discountPrice")
    public Float getDiscountPrice() {
        return new BigDecimal(price)
                .subtract(new BigDecimal(price)
                        .multiply(new BigDecimal(discount))
                        .movePointLeft(2))
                .setScale(2, RoundingMode.HALF_UP)
                .floatValue();
    }

    @Transient
    public String discountString() {
        return String.format("Скидка %d%%", discount);
    }

    @Transient
    private String priceToString(float value) {
        return String.format("₽ %.2f", value);
    }

    @Transient
    public String stringPrice() {
        return priceToString(price);
    }

    @Transient
    public String stringDiscountPrice() {
        return priceToString(getDiscountPrice());
    }

    @ManyToMany
    @JoinTable(name = "book2tag",
            joinColumns = @JoinColumn(name = "id_book"),
            inverseJoinColumns = @JoinColumn(name = "id_tag"))
    private List<Tag> tags;

    @ManyToMany
    @JoinTable(
            name = "book_review",
            joinColumns = @JoinColumn(name = "id_book"),
            inverseJoinColumns = @JoinColumn(name = "id"))
    @JsonIgnore
    List<BookReview> bookReviews;

    @Transient
    public boolean bookReviewValue(int idUser, int idReview, int value) {
        for (BookReview br : bookReviews) {
            if (br.getId() != idReview) {continue;}

            for (BookReviewLike brl : value == 1 ? br.likeBookReviews : br.dislikeBookReviews) {
                if (brl.getIdUser() == idUser) {
                    if (brl.getValue() == value) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    @Transient
    public boolean bookReviewLike(int idUser, int idReview) {
        return bookReviewValue(idUser, idReview, 1);
    }

    @Transient
    public boolean bookReviewDislike(int idUser, int idReview) {
        return bookReviewValue(idUser, idReview, -1);
    }

    @Transient
    public String getReviewEnding() {
        return ControllerService.getEnding(bookReviews.size(),
                "", "а", "ов");
    }

    @Override
    public String toString() {
        JSONObject book = new JSONObject();
        book.put("id", id);
        book.put("authors", getAuthors());
        book.put("title", title);
        book.put("price", price);
        book.put("pubDate", pubDate);
        book.put("isBestseller", bestseller);
        book.put("slug", slug);
        book.put("image", image);
        book.put("description", description);
        book.put("discount", discount);
        return book.toString();
    }



}
